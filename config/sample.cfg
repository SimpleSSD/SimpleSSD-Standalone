#
# Copyright (C) 2017 CAMELab
#
# This file is part of SimpleSSD.
#
# SimpleSSD is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# SimpleSSD is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with SimpleSSD.  If not, see <http://www.gnu.org/licenses/>.
#

#
# Sample SimpleSSD-Standalone Configuration File
#
# Section:
# global:    Global options
# generator: Request generator configuration
# trace:     Trace replayer configuration
#

# Global Configuration
[global]

## Select mode
# Possible values:
#  0: Request generator mode (all configs in [trace] will be ignored)
#  1: Trace replayer mode (all configs in [generator] will be ignored)
Mode = 0

## Statistic log period
# Print statistic log periodically
# 0 means no log printout
# Unit: ms (millisecond) in simulation time (not real time)
LogPeriod = 10

## Log file
# Set output path of statistic log and debug log
# <empty value> means no log printout
# Possible keywords:
#  STDOUT: Standard Output
#  STDERR: Standard Error
LogFile = STDOUT
DebugLogFile = STDERR

## Progress printout
# If both logs are printed to file (not screen)
# Event engine speed and simulation progress will be shown to STDOUT
# This option set the period of progress printout
# 0 means no log printout
# Unit: s (second) in host time (real time)
ProgressPeriod = 0

## Interface
# Set host interface to use
# Possible values:
#  0: No interface - directly send request to HIL layer
#  1: NVMe - Use Non-Volatile Memory Express
#  2: SATA - Use Serial AT Attachment
#  3: UFS - Use Universal Flash Storage
Interface = 0

## Scheduler
# Set scheduler to use in Block I/O Layer
# Possible values:
#  0: Noop - No scheduling
Scheduler = 0

## Breaktime between two I/Os = time
# See type definition of Request generator
BreakAsyncIO = 5us
BreakSyncIO = 10us

# Request generator configuration
[generator]

## This request generator will work similar to Flexible I/O tester
# Definition of Types:
#  str:   String, a sequence of alphanumeric characters
#  int:   SI integer, a sequence of numeric characters
#         Possible suffix (case sensitive):
#          10^3 base: k, m, g, t
#          2^10 base: K, M, G, T
#  float: Floating point number, a sequence of numeric characters
#         with one (or none) of decimal point
#  bool:  Boolean, a true or false value.
#         Possible value (case insensitive):
#          True: Non-zero number, T, True, Y, Yes
#          False: Otherwise
#  time:  SI integer, a sequenced of numeric characters
#         If no suffix provided, value will treated as pico-second.
#         Possible suffix (case sensitive):
#          s, ms, us, ns, ps

## Total size to I/O = int
# Only valid when time_based = false
io_size = 16M   # 16 * 2^20 bytes

## Type of I/O = str
# Possible values:
#  read:      Sequential read
#  write:     Sequential write
#  randread:  Random read
#  randwrite: Random write
#  readwrite: Mixed sequential I/O
#  randrw:    Mixed random I/O
readwrite = read

## Percentage of mixed I/O = float
# If readwrite is not readwrite nor randrw, this value will ignored
# 0 <= value <= 1
rwmixread = 0.5  # 50% of read I/O

## Block size = int
blocksize = 4K

## Block align = int
# Default <empty value> is blocksize
blockalign =

## I/O mode = str
# Possible values:
#  sync:  Synchronous I/O
#  async: Asynchronous I/O
iomode = async

## I/O depth = int
# iodepth = 1 when <iomode> = sync
iodepth = 32

## Offset = int
offset = 0

## Size = int
# Default <empty value> is [SSD size] - <offset>
size =

## Thinktime = time
thinktime = 0

## Random seed = int
randseed = 13245

## Time based = bool
time_based = 0

## Runtime = time
# Only valid when time_based = true
runtime = 10s

# Trace replayer configuration
[trace]

## Trace file
File = ./test.txt

## Timing option
# Possible values:
#  0: No timing constraint (Sync)
#     I/O will issued synchronously with BreakSyncIO wait time
#  1: No timing constraint (Async)
#     I/O will issued asynchronously with BreakAsyncIO wait time
#  2: Strict timing
#     I/O will issued asynchronously at exact time of trace
TimingMode = 1

## Queue depth
# Maximum asynchronous I/O depth when using TimingMode = 1
QueueDepth = 32

## Limit the number of I/O
# Set zero or leave empty to issue all I/O in the trace file
IOLimit = 0

## Trace file regular expression
# See C++11 Regular Expression Library
# Always use ECMAScript regular expression grammar
# Unmatched line will be ignored
#  This example is for blkparse result
Regex = "\d+,\d+ +\d+ +\d+ +(\d+).(\d+) +\d+ +D +(\w+) +(\d+) \+ (\d+)"

## Trace file regular expression group ID
# Mapping field and group ID of parsed trace file
# <Field> = <Group ID>
# Field may empty
# All time field will be added up
# Group ID 0 is matched string (Do not use)
# All field (except operation) must contain integer (not floating point number)
# For operation, only first character of string will be used
# R for read, W for write, F for flush and T/D for trim
# Case-insensitive
#  Example: RA (Read, Read-ahead in blkparse)
#   Handled as read operation (R)
#  Example: trim (Trim in fio iolog version 2)
#   Handled as trim operation (T)
#  Example: D (Trim in blkparse - Discard)
#   Handled as trim operation (D)
#  Example: FWFS (Flush, Write, FUA, SYNC in blkparse)
#   Handled as flush operation (F)
Operation = 3
ByteOffset =
ByteLength =
LBAOffset = 4
LBALength = 5
Second = 1
Millisecond =
Microsecond =
Nanosecond = 2
Picosecond =

## LBA size
# Set LBA size if LBA offset/length used
LBASize = 512

## Treat field (except time) as hexadecimal
# Double check that the regular expression captures hexadecimal number
UseHexadecimal = 0
